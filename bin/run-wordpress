#!/usr/bin/env bash

# Usage: bin/run-wordpress [WORDPRESS_VERSION] [PHP_VERSION]
# Example: bin/run-wordpress 67 82

# Run WP CLI as user 33
# https://github.com/docker-library/docs/tree/master/wordpress#running-as-an-arbitrary-user

# Ensure Docker CLI is installed.
if ! command -v docker >/dev/null; then
  echo "Docker CLI is required."
  exit 1
fi

WORDPRESS_VERSION_ENV="${1:-$WORDPRESS_VERSION}"
PHP_VERSION_ENV="${2:-$PHP_VERSION}"

# Parse WordPress version parameter
if [[ "$WORDPRESS_VERSION_ENV" =~ ^[0-9]{2}$ ]]; then
  WORDPRESS_VERSION="${WORDPRESS_VERSION_ENV:0:1}.${WORDPRESS_VERSION_ENV:1:1}"
else
  WORDPRESS_VERSION="$WORDPRESS_VERSION_ENV"
fi

# Exports as 8.2
export WORDPRESS_VERSION
export WORDPRESS_VERSION_ENV

# Parse WordPress version parameter
if [[ "$PHP_VERSION_ENV" =~ ^[0-9]{2}$ ]]; then
  PHP_VERSION="${PHP_VERSION_ENV:0:1}.${PHP_VERSION_ENV:1:1}"
else
  PHP_VERSION="$PHP_VERSION_ENV"
fi
# Exports as dot seperated: 5.6
export PHP_VERSION
export PHP_VERSION_ENV

: "${WORDPRESS_VERSION_ENV:=latest}"    # default WordPress version shorthand
: "${PHP_VERSION_ENV:=8.0}"             # default PHP version shorthand

: "${WORDPRESS_PORT:=80${WORDPRESS_VERSION_ENV}}"
export WORDPRESS_PORT


DOCKERFILE_PATH="./config/docker/${WORDPRESS_VERSION_ENV}-${PHP_VERSION_ENV}.Dockerfile"
if [ ! -f "$DOCKERFILE_PATH" ]; then
  echo "No Docker file available: $DOCKERFILE_PATH"
  exit 1
fi

# Use override docker compose in github actions
COMPOSE_FILES="-f config/docker-compose.yml"
if [ "$GITHUB_ACTIONS" = "true" ]; then
  COMPOSE_FILES="$COMPOSE_FILES -f config/docker-compose.override.yml"
fi

echo "Starting Docker environment with WordPress $WORDPRESS_VERSION and PHP $PHP_VERSION..."
docker compose -p tinify $COMPOSE_FILES up -d

echo "Installing WordPress..."

docker compose  -p tinify -f config/docker-compose.yml run --rm --user 33 wpcli bash -c "
  until wp db check --allow-root; do
    echo 'DB not ready yet..'
    sleep 2
  done &&

  if [ ! -f wp-config.php ]; then
    wp config create --dbname=wordpress --dbuser=wordpress --dbpass=wordpress --dbhost=db --allow-root
  fi &&

  wp db create --allow-root 2>/dev/null || true &&

  export WORDPRESS_PORT=${WORDPRESS_PORT} && \
  wp core install \
    --url=http://localhost:\${WORDPRESS_PORT} \
    --title='My Site' \
    --admin_user=admin \
    --admin_password=password \
    --admin_email=wordpress@example.com \
    --skip-email \
    --allow-root
"

echo "Activating tinify.."
docker compose -p tinify -f config/docker-compose.yml run --rm wpcli wp plugin activate tiny-compress-images --allow-root

if [ "$WORDPRESS_VERSION_ENV" -ge 55 ]; then
  echo "Installing compatible plugins for WordPress ${WORDPRESS_PORT}.."
  docker compose -p tinify -f config/docker-compose.yml run --rm --user 33 wpcli wp plugin install amazon-s3-and-cloudfront --activate --allow-root || exit 1
fi

echo "WordPress is ready at http://localhost:${WORDPRESS_PORT} (admin/password)"
echo "To stop, run: bin/stop-wordpress"
